"NeoBundle Scripts-----------------------------
if has('vim_starting')
  if &compatible
    set nocompatible               " Be iMproved
  endif

  " Required:
  set runtimepath+=/Users/dylan/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('/Users/dylan/.vim/bundle'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

"
" Add or remove your Bundles here:
NeoBundle 'chriskempson/base16-vim'
NeoBundle 'mileszs/ack.vim'
NeoBundle 'michaeljsmith/vim-indent-object'
NeoBundle 'tpope/vim-surround'
NeoBundle 'ervandew/supertab'
NeoBundle 'tpope/vim-endwise'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'vim-ruby/vim-ruby'
NeoBundle 'tpope/vim-markdown'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'tpope/vim-commentary'
NeoBundle 'tpope/vim-rails'
NeoBundle 'cakebaker/scss-syntax.vim'
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'vim-scripts/Colour-Sampler-Pack'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'chriskempson/base16-vim'
NeoBundle 'mustache/vim-mustache-handlebars'
NeoBundle 'Konfekt/FastFold'
NeoBundle 'mxw/vim-jsx'
NeoBundle 'elixir-lang/vim-elixir'

" NeoBundle 'Shougo/neosnippet.vim'
" NeoBundle 'Shougo/neosnippet-snippets'
" NeoBundle 'tpope/vim-fugitive'
" NeoBundle 'ctrlpvim/ctrlp.vim'
NeoBundle 'flazz/vim-colorschemes'

" You can specify revision/branch/tag.
" NeoBundle 'Shougo/vimshell', { 'rev' : '3787e5' }

" Required:
call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck
"End NeoBundle Scripts-------------------------set nocompatible

" call pathogen#infect()

let mapleader=","
let g:mapleader=","
if has("autocmd")
    "au BufWritePost .vimrc source $MYVIMRC
endif

set number
set numberwidth=5
" set cursorline
set ruler
set mouse=a
set hidden
set showcmd
set showmode
set nolazyredraw
set wildmenu
set wildmode=longest,list
set laststatus=2
set cmdheight=1
set backspace=indent,eol,start
set whichwrap+=<,>,h,l,[,]
set report=0
set nostartofline
command! W :w
set showtabline=2
set list
set listchars=tab:▸\ ,trail:·
set shellslash
set shell=/bin/sh
set history=10000
set showmatch
set title
" set visualbell
set mousehide
set synmaxcol=500

if has("autocmd")
    au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif
endif

" au FileType qf call AdjustWindowHeight(3, 10)
" function! AdjustWindowHeight(minheight, maxheight)
"   exe max([min([line("$"), a:maxheight]), a:minheight]) . "wincmd _"
" endfunction

set incsearch
set hls
set ignorecase
set smartcase
set wrapscan
nnoremap <silent> <CR> :nohlsearch<cr>
map Q gq
set autoindent
" set smartindent
set nowrap
set so=7
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set nosmarttab
set nomodeline
syntax on
set hlsearch

"""""""""""""""""""""""""""
" COLOR
"""""""""""""""""""""""""""
" :set t_Co=256
:color base16-ocean
set bg=dark
" let g:powerline_config_overrides = {"colorscheme": "base16"}
" let g:Powerline_colorscheme = 'base16'
"""""""""""""""""""""""""""
" STATUS LINE
"""""""""""""""""""""""""""
:set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)
:hi User1 term=inverse,bold cterm=inverse,bold ctermfg=red

" Remap the tab key to do autocompletion or indentation depending on the
" context (from http://www.vim.org/tips/tip.php?tip_id=102)
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

augroup myfiletypes
    "clear old autocmds in group
    autocmd!
    "for ruby, autoindent with two spaces, always expand tabs
    autocmd BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru,*.jbuilder}    set ft=ruby
    autocmd FileType ruby,coffee,haml,eruby,yaml,html,javascript,sass,cucumber set ai sw=2 sts=2 et
    autocmd FileType python set sw=4 sts=4 et
augroup END
set switchbuf=useopen
let macvim_hig_shift_movement = 1

function! s:bashrockets() range
  let lnum = a:firstline
  while lnum <= a:lastline
    let newline = substitute(getline(lnum), ':\(\w\+\)\s*=>', '\1:', 'g')
    call setline(lnum, newline)
    let lnum += 1
  endwhile
endfunction
command! -range Bashrockets :<line1>,<line2>call s:bashrockets()

function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'))
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>n :call RenameFile()<cr>
map <leader><tab> :NERDTree<cr>

nnoremap <leader><leader> <c-^>

set winwidth=84
" We have to have a winheight bigger than we want to set winminheight. But if
" we set winheight to be huge before winminheight, the winminheight set will
" fail.
" set winheight=10
" set winminheight=10
" set winheight=999
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <c-n> :let &wh = (&wh == 999 ? 10 : 999)<CR><C-W>=

" Testing Functions
function! RunTests(filename)
    " Write the file and run tests for the given filename
    :w
    " :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    " :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    " :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    " :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    " :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    " :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    if match(a:filename, '\.feature$') != -1
        exec ":!cucumber --drb " . a:filename
    else
        if filereadable("script/test")
            exec ":!script/test " . a:filename
        else
          if has("gui_macvim")
            exec ":!rspec --no-color " . a:filename
          else
            exec ":!rspec " . a:filename
          end
        end
    end
endfunction

function! RunAllTests()
    :w
    if has("gui_macvim")
      exec ":!rspec spec --no-color"
    else
      exec ":!rspec spec"
    endif
endfunction


function! SetTestFile()
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@%
endfunction

function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    " Run the tests for the previously-marked file.
    let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\)$') != -1
    if in_test_file
        call SetTestFile()
    elseif !exists("t:grb_test_file")
        return
    end
    call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number)
endfunction
map <leader>s :call RunTestFile()<cr>
map <leader>S :call RunNearestTest()<cr>
map <leader>A :call RunAllTests()<cr>
map <leader>c :w\|:!cucumber --drb<cr>


map <leader>gv :CtrlP app/views<cr>
map <leader>gj :CtrlP app/assets/javascripts<cr>
map <leader>gc :CtrlP app/controllers<cr>
map <leader>gm :CtrlP app/models<cr>
map <leader>gh :CtrlP app/helpers<cr>
map <leader>gl :CtrlP lib<cr>
map <leader>gs :CtrlP spec<cr>
map <leader>ge :CtrlP ember<cr>
map <leader>gg :topleft 100 :split Gemfile<cr>

map <leader>t :CtrlP<cr>
map <leader>b :CtrlPBuffer<cr>
map <leader>a :A<cr>
map <leader>r :R<cr>

function! PromoteToLet()
  :normal! dd
  :normal! P
  :.s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
  :normal ==
endfunction
:command! PromoteToLet :call PromoteToLet()
:map <leader>p :PromoteToLet<cr>

" " Indent p tags
" autocmd FileType html,eruby if b:eruby_subtype != 'javascript' && g:html_indent_tags !~ '\\|p\>' | let g:html_indent_tags .= '\|p\|li\|dt\|dd' | endif
" " map <silent> <leader>y :<C-u>silent '<,'>w !pbcopy<CR>
map <leader>y "*y


set timeoutlen=250

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=
let g:ackprg = 'ag --nogroup --nocolor --column'
let g:ack_autoclose=1
set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim
set wildignore+=*/tmp/*,*.log,*.swp,*.zip

" Folding
inoremap <F9> <C-O>za
nnoremap <F9> za
onoremap <F9> <C-C>za
vnoremap <F9> zf
map <leader>fs :setlocal foldmethod=syntax<cr>
nnoremap <Space> za
" autocmd Syntax ruby setlocal foldmethod=syntax
" autocmd Syntax ruby normal zR


" Fuzzy select one of those. Open the selected file with :e.
let g:gitgutter_sign_column_always = 1
let g:gitgutter_realtime = 1
set dir=~/.vimswap//,/tmp//,.
let g:ctrlp_custom_ignore = {
  \ 'dir': 'node_modules\|bower_components\|ember/vendor\|build'
  \ }
let g:ctrlp_working_path_mode = ''

let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_liststyle=3
