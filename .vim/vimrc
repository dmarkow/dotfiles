set nocompatible
call pathogen#infect()
filetype plugin indent on

let mapleader=","
let g:mapleader=","

if has("autocmd")
    "au BufWritePost .vimrc source $MYVIMRC
endif

set number
set numberwidth=5
set cursorline
set ruler
set mouse=a
set hidden
set showcmd
set showmode
set nolazyredraw
set wildmenu
set wildmode=longest,list
set laststatus=2
set cmdheight=1
set backspace=indent,eol,start
set whichwrap+=<,>,h,l,[,]
set report=0
set nostartofline
command! W :w
set showtabline=2
set list
set listchars=tab:▸\ ,trail:·
set shellslash
set shell=/bin/sh
set history=10000
set showmatch
set title
set visualbell
set mousehide
" set synmaxcol=200

if has("autocmd")
    au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif
endif

au FileType qf call AdjustWindowHeight(3, 10)
function! AdjustWindowHeight(minheight, maxheight)
  exe max([min([line("$"), a:maxheight]), a:minheight]) . "wincmd _"
endfunction

set incsearch
set hls
set ignorecase
set smartcase
set wrapscan
nnoremap <silent> <CR> :nohlsearch<cr>
map Q gq
set autoindent
" set smartindent
set nowrap
set so=7
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set nosmarttab
set nomodeline
if &t_Co > 2 || has("gui_running")
    syntax on
    set hlsearch
    if has("gui_macvim")
        set guifont=Consolas:h13
        " set guifont=Inconsolata:h15
        " set guifont=Monaco:h11
    else
        set guifont=Ubuntu\ Mono\ 11
    endif
end
:set t_Co=256
:set bg=dark
:set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)
:hi User1 term=inverse,bold cterm=inverse,bold ctermfg=red

" Remap the tab key to do autocompletion or indentation depending on the
" context (from http://www.vim.org/tips/tip.php?tip_id=102)
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

augroup myfiletypes
    "clear old autocmds in group
    autocmd!
    "for ruby, autoindent with two spaces, always expand tabs
    autocmd BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru,*.jbuilder}    set ft=ruby
    autocmd FileType ruby,coffee,haml,eruby,yaml,html,javascript,sass,cucumber set ai sw=2 sts=2 et
    autocmd FileType python set sw=4 sts=4 et
augroup END
set switchbuf=useopen
let macvim_hig_shift_movement = 1

function! s:bashrockets() range
  let lnum = a:firstline
  while lnum <= a:lastline
    let newline = substitute(getline(lnum), ':\(\w\+\)\s*=>', '\1:', 'g')
    call setline(lnum, newline)
    let lnum += 1
  endwhile
endfunction
command! -range Bashrockets :<line1>,<line2>call s:bashrockets()

function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'))
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>n :call RenameFile()<cr>

nnoremap <leader>' ""yls<c-r>={'"': "'", "'": '"'}[@"]<cr><esc>

"test"

nnoremap <leader><leader> <c-^>
set winwidth=84
" We have to have a winheight bigger than we want to set winminheight. But if
" we set winheight to be huge before winminheight, the winminheight set will
" fail.
set winheight=10
set winminheight=10
set winheight=999
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <c-n> :let &wh = (&wh == 999 ? 10 : 999)<CR><C-W>=

" Testing Functions
function! RunTests(filename)
    " Write the file and run tests for the given filename
    :w
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    if match(a:filename, '\.feature$') != -1
        exec ":!cucumber --drb " . a:filename
    else
        if filereadable("script/test")
            exec ":!script/test " . a:filename
        else
            exec ":!rspec --color " . a:filename
        end
    end
endfunction

function! RunAllTests()
    :w
    exec ":!rspec spec"
endfunction


function! SetTestFile()
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@%
endfunction

function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    " Run the tests for the previously-marked file.
    let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\)$') != -1
    if in_test_file
        call SetTestFile()
    elseif !exists("t:grb_test_file")
        return
    end
    call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number)
endfunction
map <leader>s :call RunTestFile()<cr>
map <leader>S :call RunNearestTest()<cr>
map <leader>A :call RunAllTests()<cr>
map <leader>c :w\|:!cucumber --drb<cr>

if &term =~ "xterm"
    let g:CommandTCancelMap = ['<ESC>', '<C-c>']
    let g:CommandTSelectNextMap = ['<C-n>', '<C-j>', '<ESC>OB']
    let g:CommandTSelectPrevMap = ['<C-p>', '<C-k>', '<ESC>OA']
endif

map <leader>gv :CommandTFlush<cr>\|:CommandT app/views<cr>
map <leader>gc :CommandTFlush<cr>\|:CommandT app/controllers<cr>
map <leader>gm :CommandTFlush<cr>\|:CommandT app/models<cr>
map <leader>gh :CommandTFlush<cr>\|:CommandT app/helpers<cr>
map <leader>gl :CommandTFlush<cr>\|:CommandT lib<cr>
map <leader>gs :CommandTFlush<cr>\|:CommandT spec<cr>
map <leader>gg :topleft 100 :split Gemfile<cr>

map <leader>t :CommandTFlush<cr>\|:CommandT<cr>
map <leader>a :A<cr>
map <leader>r :R<cr>

function! PromoteToLet()
  :normal! dd
  " :exec '?^\s*it\>'
  :normal! P
  :.s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
  :normal ==
  "         " :normal! <<
  "           " :normal! ilet(:
  "             " :normal! f 2cl) {
  "               " :normal! A }
endfunction
:command! PromoteToLet :call PromoteToLet()
:map <leader>p :PromoteToLet<cr>

" Indent p tags
autocmd FileType html,eruby if g:html_indent_tags !~ '\\|p\>' | let g:html_indent_tags .= '\|p\|li\|dt\|dd' | endif
map <silent> <leader>y :<C-u>silent '<,'>w !pbcopy<CR>
:colorscheme jellybeans-dm
